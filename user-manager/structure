Домашнє завдання на 16 урок:

    1. Додати можливість редагування профілів створених користувачів системи. Адмін може бачити усі user details сторінки користувачів окрім захищеної інформації (наприклад пароль)

    DONE~✅ 2. На сторінці details, мають бути кнопки Edit & Save.

    3. Кнопка Edit дає можливість редагувати профіль користувача. Адмін може змінювати усі дозволені поля, будь якого користувача системи (мейл користувача у форматі read only, можна бачити та не можна редагувати). Звичайний користувач може редагувати лише свій профіль, а також він може бачити усю інформацію у своєму профілі.

    4. Додати у профіль користувача селект меню з перерахованими правами доступу в системі (can edit users, can view users, can create users etc.)

    Змінювати права доступу в системі може тільки адмін. Звичайний юзер бачить список своїх прав в профілі у форматі списку (read only).

          Порада: старайтесь не привязувати перевірки на доступи до ролей, краще привязуйте перевірки до прав конкретного юзера, тоді система буде більш зручнішою та в майбутньому таку систему легше масштабувати.

    5. Після зміни прав у будь якого юзера одразу змінюється можливості. Наприклад у юзера з правами: can edit users, can view users, з`являється можливість перегляду та редагування профілів юзера, як у адміна, але нема можливості видаляти профілі, в такому випадку кнопка Delete повинна бути disabled. (Нагадуємо, що у адміна повинні бути присутні усі права на будь які дії). Для прав у об`єкт user, потрібно добавити масив entitlements в якому стрічками записувати права відповідного юзера

    DONE~✅6. Якщо користувач не авторизувався він не може перейти на сторінки перегляду/редагування та інші, тут повинен працювати редірект на сторінку логіну.

    7. Користувач що не має прав на перегляд профілів (can view details) інших користувачів, не може зайти на їх сторінку user details. При спробі зайти на будь яку не дозволену сторінку користувачу повинно прийти повідомлення про те, що в нього немає відповідних прав на доступ.

    DONE~✅8. Запитувати користувача чи він хоче покинути сторінку редагування якщо він почав процес редагування сторінки але не зберіг зміни. Для цього використовувати можна confirm popup вікно бутстрапу.

    DONE~✅9. Якщо користувач зайшов на сторінку редагування але не змінював її, при її покиданні вікно не повинне з`являтися. А кнопка Save повинна бути disabled.

    DONE~✅10. При збереженні, видалені, зміні і тд. будь яких даних за допомогою toastr сервісу показувати повідомлення користувачеві в юзер френдлі форматі.

    11. Після усіх змін в цьому проекті як спражні девелопери, перейдіться по всім участкам системи які могли піддаватися змінам, та протестуйте їх на правильність роботи.

          Перелік прав у масиві entitlements: can_view_users, can_edit_users, can_delete_users, can_view_details, can_view_details_full, can_edit_users_full.

          can_view_users - дозвіл на перегляд списку користувачів системи;
          can_edit_users - дозвіл на редагування списку користувачів системи (без редагування прав юзера);
          can_delete_users - дозвіл на видалення із списку користувачів системи;
          can_view_details - дозвіл на перегляд профілів користувачів системи (без перегляду прав в профілі іншого юзера);
          can_view_details_full - дозвіл на перегляд профілів користувачів системи, повний доступ з правами також на перегляд списку заданих прав (це права адміна);
          DONE~✅can_edit_users_full - дозвіл на редагування юзерів, з можливістю видалення або додавання прав (це права адміна);

Не забувайте заливати свої зміни на гітхаб !

Порада: не робіть великих комітів. Краще зробити декілька маленьких, так легше відслідковувати зміни, і в разі потреби відшукати проблемні участки коду.




Домашнє завдання на 15 урок:

DONE~✅ 1. Додати логіку для аутентифікації та авторизації на сервер який ви зробили у 13 уроці. Логіку зробити потрібно схожою яку ви бачили у відео уроці.

DONE~✅ 2. Для реалізації всього потрібно використати Passport js. Як частина ДЗ вам потрібно самостійно розібратися з Passport js, це не складно ':)'

DONE~✅ 3. Використовуйте стратегію passport jwt. (Додатковий матеріал можна знайти тут)

DONE~✅ 4. У вас повинні існувати 2 ролі в додатку - admin та customer.

DONE~✅ 5. Customer - має право переглядати та створювати юзерів.

DONE~✅ 6. Admin - має право на всі дії в додатку переглядати/редагувати/створювати/видаляти, окрім того щоб бачити особисті дані користувача (пошта, телефон інші особисті дані).

DONE~✅ 7. При помилці видавати відповідний статус та меседж на клієнт.
DONE~✅ 8. Усю роботу перевіряти за допомогою Postman.

DONE~✅ 9. На клієнтскій стороні додати auth сервіс який буде відправляти запити для аутентифікації та авторизації.

DONE~✅ 10. Протестувати які дані та права юзера ви отримуєте у відповідь (admin/customer).

ДЗ на 14 урок:

 DONE~✅ 1. Поділити додаток на головні (app, core) модулі та фіча-модулі (фіча-модулі повинні виділятись окремим функціоналом або сторінками). Основна задача впровадити Multiple Module Structure в ваш проект.

 DONE~✅ 2. Додати для кожного модуля крім SharedModule створені в попередньому завданні маршрути (Routing). Тобто маршрути повинні підгружати (Lazy Loading) певний модуль, який в свою чергу запускає свій компонент.

 DONE~✅ 3. Кожний модуль повинен мати налаштування Lazy Loading (модуль повинен вантажитись лише тоді, коли користувач заходить на його маршрут, також модуль має мати окремий чанк в білді).

    DONE~✅ Логін на завданні до 14 уроку ми ще поки обходимо. Наразі просто нехай існує “заглушка” логіну, тобто імітацію логіну в систему і саму сторінку логіну. Яка буде доступна по роуту в вашому Angular проекті.

 DONE~✅ 4. Як і попередньому завданні повинен бути реалізований перехід по сторінках “/login” -> “Логін”, “/dashboard” -> “Головна”, “/users” -> “Список юзерів”, “/my-page” -> “Мій аккаунт”, “users/{user-id}” -> “Деталі юзера”, але уже з робочим Lazy Loading. 

 DONE~✅ 5. Роботу Lazy Loading треба протестувати та переконатися, що все працює, модулі повинні загружатися лише тоді коли в URL введений відповідний маршрут. А також в білді для модуля існує окремий чанк.

   DONE~✅   6. Ваше завдання розширити можливості проекту, тому на цьому етапі у вас повинні функціонувати вже усі завдання з 13 уроку і їх мають доповнювати завдання до даного 14 уроку.

 DONE~✅ 7. На кожній сторінці також перевірте зв`язок з BE частиною. Усі запити (GET, POST etc.) Повинні функціонувати. Користуйтесь для перевірки роботи серверної частини Chrome DevTools на вкладці Network.

 DONE~✅ 8. На сторінці “/users” додати список, можна використовувати Bootstrap, який виводить усі отримані з BE списки юзерів. Список юзерів потрібно вивести посортованими по імені в алфавітному порядку.

 DONE~✅ 9. Також на сторінці “/users” додати компоненту, що буде виконувати функціонал додавання в список нового юзера. Це повинно бути поле для вводу, кнопка “Add”, яка є заблокована до моменту поки юзер не почне вводити текст. 

 DONE~✅ Валідація повинна пропускати лише латиницю. Не можна пропустити: будь-які цифри, та символи типу !#:%,.()-_+^&*, а також кирилицю.

 DONE~✅ Усі помилки при валідації обробляти в юзерфрендлі форматі.

 DONE~✅ 10. Усі відповіді бекенда обробляти в юзерфрендлі форматі.

 DONE~✅ 11. Додатково: підключити до свого додатку Toastr для відображення повідомлень користувачеві про успішне створення, чи не успішне створення нового юзера.

 DONE~✅ А також створити NotifyService як обгортку для toastr сервісу в SharedModule.

 DONE~✅ Обробляти усі повідомлення (про помилки BE, про успішні запити, а також неуспішні), окрім валідації полів через NotifyService.

ДЗ на 13 урок:

DONE~✅— Створити Boilerplate для Angular проекту

DONE~✅— Головне завдання 13 уроку створити Angular Routing для переходу по різним сторінкам вашого проекту.

DONE~✅— Повинен бути вже частково готовий BE проекту, поки що без реалізації JWT авторизації, лише API та маршрутизація на стороні BE. 

DONE~✅— — Логін на завданні до 13 уроку ми поки обходимо. Наразі просто треба створити “заглушку” логіну, тобто імітацію логіну в систему і саму сторінку логіну. Яка буде доступна по роуту в вашому Angular проекті.

DONE~✅— Повинен бути реалізований перехід по сторінках “/login” -> “Логін”, “/dashboard” -> “Головна”, “/users” -> “Список юзерів”, “/my-page” -> “Мій акаунт”, “users/{user-id}” -> “Деталі юзера”.

DONE~✅— “Головна” - грає роль Welcome сторінки для цієї системи. На неї користувач попадає після Логіну в систему. На ній ми бачимо - header, footer, content (Welcome + Lorem Ipsum), sidebar menu (My Page -> веде на сторінку з деталями користувача що зайшов, Dashboard -> веде на головну, Users -> веде на сторінку з списком користувачів, Logout -> веде на Login сторінку)

DONE~✅— На цьому етапі найважливішим є структура файлів, робочий BE та створений роутинг для FE частини для переходу по сторінках.

DONE~✅— Наразі сторінки можуть бути або пустими, або місити контент заглушку. 

DONE~✅— Додавати контент та функціонал ми будемо на наступних ДЗ.

DONE~✅— Готове ДЗ 13 уроку повинно бути доступне на вашому GitHub акаунті, обовязково з використанням GitFlow. Без використання або без правильного використання GitFlow завдання не буде розцінюватись як завершене.